# The three main contexts in Nginx configuration are: Main, Http, Events

# Main: The main context is the top-level block in the configuration file and contains directives that apply to the entire Nginx server.
# Events Context (events block): The events context is used to configure global settings related to the event processing mechanism of the server.
# HTTP Context (http block): The http context is where you configure settings related to HTTP server behavior.

# ********************* NginX Configuration*************************
# user directive is used to specify the user account under which the Nginx worker processes should run.
# www-data is a common username used by web servers on Unix-like systems, especially in distributions like Ubuntu.
user www-data;
# worker_processes directive is used to define the number of worker processes that Nginx should spawn to handle incoming requests. auto option for worker_processes allows Nginx to automatically determine the number of worker processes based on the number of available CPU cores.
worker_processes auto;
# The pid directive in Nginx is used to specify the file path where Nginx should write its process ID (PID) information.
pid /run/nginx.pid;
# Include the conf file of the other modules that has to  be enabled in this configuration
include /etc/nginx/modules-enabled/*.conf;

# The events block is used to configure parameters related to how Nginx handles connections, such as the number of worker processes, connection timeouts, and other event-related settings.
events {
    # The worker_connections directive in Nginx is used to set the maximum number of connections that each worker process can handle simultaneously
    worker_connections 768;
    # If multi_accept is disabled, a worker process will accept one new connection at a time. Otherwise, a worker process will accept all new connections at a time.
    multi_accept on;
    # Connection processing methods, depends on the system we are using
    use epollo;
}

http {
    # Enables the use of the sendfile system call for file transfers, allowing efficient file delivery.
    sendfile on;
    # This defines the maximum chunk that can be sent so that the connection does not overlong
    sendfile_max_chunk 1m;
    # It optimizes the delivery of small files by reducing the latency associated with waiting for the TCP buffer to be filled before sending data.
    # It is particularly useful in scenarios where small responses (e.g., images, scripts, or stylesheets) need to be delivered quickly without delaying the response.
    tcp_nopush on;
    # The types_hash_max_size directive in Nginx is used to set the maximum size of the hash table that is used for storing MIME types.
    types_hash_max_size 2048;
    # Enables or disables emitting nginx version on error pages and in the “Server” response header field.
    server_tokens off;
    # server_names_hash_bucket_size is a directive that sets the size of the hash bucket for server names.
    server_names_hash_bucket_size 64;
    # server_name_in_redirect directive in Nginx controls whether the server name is included in redirect responses sent by the server.
    server_name_in_redirect off;
    # Include the mime type configuration
    include /etc/nginx/mime.types;
    # Default Mime Type
    default_type application/octet-stream;
    # Enables the specified protocols.
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
    # Directs Nginx to use server-preferred ciphers during SSL/TLS negotiation.
    ssl_prefer_server_ciphers on;
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    # Enables or disables gzipping of responses.
    gzip on;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    # Enables gzipping of responses for the specified MIME types
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
