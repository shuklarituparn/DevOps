workflow:
  auto_cancel:
    on_new_commit: interruptible

job1:
  interruptible: true
  script: sleep 60

job2:
  interruptible: false  # Default when not defined.
  script: sleep 60


In this example:

When a new commit is pushed to a branch, GitLab creates a new pipeline and job1 and job2 start.
If a new commit is pushed to the branch before the jobs complete, only job1 is canceled.



////////////////////////////////////////// Example /////////////////////////////////////////////////////////////////////

stages: [stage_a, stage_b]

workflow:
  auto_cancel:
    on_job_failure: all

job1:
  stage: stage_a
  script: sleep 60

job2:
  stage: stage_a
  script:
    - sleep 30
    - exit 1

job3:
  stage: stage_b
  script:
    - sleep 30


In this example, if job2 fails, job1 is cancelled if it is still running and job3 does not start.


////////////////////////////////////////// Example /////////////////////////////////////////////////////////////////////

workflow:
  name: 'Pipeline for branch: $CI_COMMIT_BRANCH'


  variables:
    PROJECT1_PIPELINE_NAME: 'Default pipeline name'  # A default is not required.

  workflow:
    name: '$PROJECT1_PIPELINE_NAME'
    rules:
      - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
        variables:
          PROJECT1_PIPELINE_NAME: 'MR pipeline: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME'
      - if: '$CI_MERGE_REQUEST_LABELS =~ /pipeline:run-in-ruby3/'
        variables:
          PROJECT1_PIPELINE_NAME: 'Ruby 3 pipeline'
      - when: always  # Other pipelines can run, but use the default name

# An example where we can use different pipeline name


////////////////////////////////////////// Example /////////////////////////////////////////////////////////////////////

variables:
  DEPLOY_VARIABLE: "default-deploy"

workflow:
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:
        DEPLOY_VARIABLE: "deploy-production"  # Override globally-defined DEPLOY_VARIABLE
    - if: $CI_COMMIT_REF_NAME =~ /feature/
      variables:
        IS_A_FEATURE: "true"                  # Define a new variable.
    - when: always                            # Run the pipeline in other cases

job1:
  variables:
    DEPLOY_VARIABLE: "job1-default-deploy"
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:                                   # Override DEPLOY_VARIABLE defined
        DEPLOY_VARIABLE: "job1-deploy-production"  # at the job level.
    - when: on_success                             # Run the job in other cases
  script:
    - echo "Run script with $DEPLOY_VARIABLE as an argument"
    - echo "Run another script if $IS_A_FEATURE exists"

job2:
  script:
    - echo "Run script with $DEPLOY_VARIABLE as an argument"
    - echo "Run another script if $IS_A_FEATURE exists"


When the branch is the default branch:

job1’s DEPLOY_VARIABLE is job1-deploy-production.
job2’s DEPLOY_VARIABLE is deploy-production.
When the branch is feature:

job1’s DEPLOY_VARIABLE is job1-default-deploy, and IS_A_FEATURE is true.
job2’s DEPLOY_VARIABLE is default-deploy, and IS_A_FEATURE is true.
When the branch is something else:

job1’s DEPLOY_VARIABLE is job1-default-deploy.
job2’s DEPLOY_VARIABLE is default-deploy.


////////////////////////////////////////// Example /////////////////////////////////////////////////////////////////////


workflow:
  auto_cancel:
    on_new_commit: interruptible
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == 'true'
      auto_cancel:
        on_new_commit: none
    - when: always                  # Run the pipeline in other cases

test-job1:
  script: sleep 10
  interruptible: false

test-job2:
  script: sleep 10
  interruptible: true



